"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupMode = exports.Compression = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Possible compression options Kinesis Data Firehose can use to compress data on delivery.
 */
class Compression {
    /**
     * @param value the string value of the Compression.
     */
    constructor(value) {
        this.value = value;
    }
    /**
     * Creates a new Compression instance with a custom value.
     */
    static of(value) {
        return new Compression(value);
    }
}
exports.Compression = Compression;
_a = JSII_RTTI_SYMBOL_1;
Compression[_a] = { fqn: "@aws-cdk/aws-kinesisfirehose-destinations-alpha.Compression", version: "2.23.0-alpha.0" };
/**
 * gzip
 */
Compression.GZIP = new Compression('GZIP');
/**
 * Hadoop-compatible Snappy
 */
Compression.HADOOP_SNAPPY = new Compression('HADOOP_SNAPPY');
/**
 * Snappy
 */
Compression.SNAPPY = new Compression('Snappy');
/**
 * ZIP
 */
Compression.ZIP = new Compression('ZIP');
/**
 * Options for S3 record backup of a delivery stream.
 */
var BackupMode;
(function (BackupMode) {
    /**
     * All records are backed up.
     */
    BackupMode[BackupMode["ALL"] = 0] = "ALL";
    /**
     * Only records that failed to deliver or transform are backed up.
     */
    BackupMode[BackupMode["FAILED"] = 1] = "FAILED";
})(BackupMode = exports.BackupMode || (exports.BackupMode = {}));
//# sourceMappingURL=data:application/json;base64,