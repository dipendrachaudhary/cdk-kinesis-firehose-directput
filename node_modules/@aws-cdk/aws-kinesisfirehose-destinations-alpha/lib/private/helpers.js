"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBackupConfig = exports.createProcessingConfig = exports.createEncryptionConfig = exports.createBufferingHints = exports.createLoggingOptions = void 0;
const logs = require("aws-cdk-lib/aws-logs");
const s3 = require("aws-cdk-lib/aws-s3");
const constructs_1 = require("constructs");
function createLoggingOptions(scope, props) {
    var _a, _b;
    if (props.logging === false && props.logGroup) {
        throw new Error('logging cannot be set to false when logGroup is provided');
    }
    if (props.logging !== false || props.logGroup) {
        const logGroup = (_b = (_a = props.logGroup) !== null && _a !== void 0 ? _a : constructs_1.Node.of(scope).tryFindChild('LogGroup')) !== null && _b !== void 0 ? _b : new logs.LogGroup(scope, 'LogGroup');
        const logGroupGrant = logGroup.grantWrite(props.role);
        return {
            loggingOptions: {
                enabled: true,
                logGroupName: logGroup.logGroupName,
                logStreamName: logGroup.addStream(props.streamId).logStreamName,
            },
            dependables: [logGroupGrant],
        };
    }
    return undefined;
}
exports.createLoggingOptions = createLoggingOptions;
function createBufferingHints(interval, size) {
    var _a, _b;
    if (!interval && !size) {
        return undefined;
    }
    const intervalInSeconds = (_a = interval === null || interval === void 0 ? void 0 : interval.toSeconds()) !== null && _a !== void 0 ? _a : 300;
    if (intervalInSeconds < 60 || intervalInSeconds > 900) {
        throw new Error(`Buffering interval must be between 60 and 900 seconds. Buffering interval provided was ${intervalInSeconds} seconds.`);
    }
    const sizeInMBs = (_b = size === null || size === void 0 ? void 0 : size.toMebibytes()) !== null && _b !== void 0 ? _b : 5;
    if (sizeInMBs < 1 || sizeInMBs > 128) {
        throw new Error(`Buffering size must be between 1 and 128 MiBs. Buffering size provided was ${sizeInMBs} MiBs.`);
    }
    return { intervalInSeconds, sizeInMBs };
}
exports.createBufferingHints = createBufferingHints;
function createEncryptionConfig(role, encryptionKey) {
    encryptionKey === null || encryptionKey === void 0 ? void 0 : encryptionKey.grantEncryptDecrypt(role);
    return encryptionKey
        ? { kmsEncryptionConfig: { awskmsKeyArn: encryptionKey.keyArn } }
        : undefined;
}
exports.createEncryptionConfig = createEncryptionConfig;
function createProcessingConfig(scope, role, dataProcessor) {
    return dataProcessor
        ? {
            enabled: true,
            processors: [renderDataProcessor(dataProcessor, scope, role)],
        }
        : undefined;
}
exports.createProcessingConfig = createProcessingConfig;
function renderDataProcessor(processor, scope, role) {
    const processorConfig = processor.bind(scope, { role });
    const parameters = [{ parameterName: 'RoleArn', parameterValue: role.roleArn }];
    parameters.push(processorConfig.processorIdentifier);
    if (processor.props.bufferInterval) {
        parameters.push({ parameterName: 'BufferIntervalInSeconds', parameterValue: processor.props.bufferInterval.toSeconds().toString() });
    }
    if (processor.props.bufferSize) {
        parameters.push({ parameterName: 'BufferSizeInMBs', parameterValue: processor.props.bufferSize.toMebibytes().toString() });
    }
    if (processor.props.retries) {
        parameters.push({ parameterName: 'NumberOfRetries', parameterValue: processor.props.retries.toString() });
    }
    return {
        type: processorConfig.processorType,
        parameters,
    };
}
function createBackupConfig(scope, role, props) {
    var _a, _b, _c;
    if (!props || (props.mode === undefined && !props.bucket)) {
        return undefined;
    }
    const bucket = (_a = props.bucket) !== null && _a !== void 0 ? _a : new s3.Bucket(scope, 'BackupBucket');
    const bucketGrant = bucket.grantReadWrite(role);
    const { loggingOptions, dependables: loggingDependables } = (_b = createLoggingOptions(scope, {
        logging: props.logging,
        logGroup: props.logGroup,
        role,
        streamId: 'S3Backup',
    })) !== null && _b !== void 0 ? _b : {};
    return {
        backupConfig: {
            bucketArn: bucket.bucketArn,
            roleArn: role.roleArn,
            prefix: props.dataOutputPrefix,
            errorOutputPrefix: props.errorOutputPrefix,
            bufferingHints: createBufferingHints(props.bufferingInterval, props.bufferingSize),
            compressionFormat: (_c = props.compression) === null || _c === void 0 ? void 0 : _c.value,
            encryptionConfiguration: createEncryptionConfig(role, props.encryptionKey),
            cloudWatchLoggingOptions: loggingOptions,
        },
        dependables: [bucketGrant, ...(loggingDependables !== null && loggingDependables !== void 0 ? loggingDependables : [])],
    };
}
exports.createBackupConfig = createBackupConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBSUEsNkNBQTZDO0FBQzdDLHlDQUF5QztBQUV6QywyQ0FBMEQ7QUFzRDFELFNBQWdCLG9CQUFvQixDQUFDLEtBQWdCLEVBQUUsS0FBOEI7O0lBQ25GLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtRQUM3QyxNQUFNLElBQUksS0FBSyxDQUFDLDBEQUEwRCxDQUFDLENBQUM7S0FDN0U7SUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7UUFDN0MsTUFBTSxRQUFRLGVBQUcsS0FBSyxDQUFDLFFBQVEsbUNBQUksaUJBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBbUIsbUNBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNySSxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RCxPQUFPO1lBQ0wsY0FBYyxFQUFFO2dCQUNkLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFlBQVksRUFBRSxRQUFRLENBQUMsWUFBWTtnQkFDbkMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWE7YUFDaEU7WUFDRCxXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQUM7U0FDN0IsQ0FBQztLQUNIO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQWpCRCxvREFpQkM7QUFFRCxTQUFnQixvQkFBb0IsQ0FDbEMsUUFBdUIsRUFDdkIsSUFBZTs7SUFFZixJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ3RC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YUFBbEIsa0JBQWtCLGNBQWxCLGtCQUFrQixHQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQzFELENBQUM7QUFDSixDQUFDO0FBNUJELGdEQTRCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIGZpcmVob3NlIGZyb20gJ0Bhd3MtY2RrL2F3cy1raW5lc2lzZmlyZWhvc2UtYWxwaGEnO1xuaW1wb3J0IHsgQ2ZuRGVsaXZlcnlTdHJlYW0gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3Mta2luZXNpc2ZpcmVob3NlJztcbmltcG9ydCAqIGFzIGttcyBmcm9tICdhd3MtY2RrLWxpYi9hd3Mta21zJztcbmltcG9ydCAqIGFzIGxvZ3MgZnJvbSAnYXdzLWNkay1saWIvYXdzLWxvZ3MnO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBDb25zdHJ1Y3QsIElEZXBlbmRhYmxlLCBOb2RlIH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBEZXN0aW5hdGlvblMzQmFja3VwUHJvcHMgfSBmcm9tICcuLi9jb21tb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIERlc3RpbmF0aW9uTG9nZ2luZ1Byb3BzIHtcbiAgLyoqXG4gICAqIElmIHRydWUsIGxvZyBlcnJvcnMgd2hlbiBkYXRhIHRyYW5zZm9ybWF0aW9uIG9yIGRhdGEgZGVsaXZlcnkgZmFpbHMuXG4gICAqXG4gICAqIElmIGBsb2dHcm91cGAgaXMgcHJvdmlkZWQsIHRoaXMgd2lsbCBiZSBpbXBsaWNpdGx5IHNldCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWUgLSBlcnJvcnMgYXJlIGxvZ2dlZC5cbiAgICovXG4gIHJlYWRvbmx5IGxvZ2dpbmc/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgQ2xvdWRXYXRjaCBsb2cgZ3JvdXAgd2hlcmUgbG9nIHN0cmVhbXMgd2lsbCBiZSBjcmVhdGVkIHRvIGhvbGQgZXJyb3IgbG9ncy5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBpZiBgbG9nZ2luZ2AgaXMgc2V0IHRvIGB0cnVlYCwgYSBsb2cgZ3JvdXAgd2lsbCBiZSBjcmVhdGVkIGZvciB5b3UuXG4gICAqL1xuICByZWFkb25seSBsb2dHcm91cD86IGxvZ3MuSUxvZ0dyb3VwO1xuXG4gIC8qKlxuICAgKiBUaGUgSUFNIHJvbGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGVzdGluYXRpb24uXG4gICAqL1xuICByZWFkb25seSByb2xlOiBpYW0uSVJvbGU7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgc3RyZWFtIHRoYXQgaXMgY3JlYXRlZCBpbiB0aGUgbG9nIGdyb3VwIHdoZXJlIGxvZ3Mgd2lsbCBiZSBwbGFjZWQuXG4gICAqXG4gICAqIE11c3QgYmUgdW5pcXVlIHdpdGhpbiB0aGUgbG9nIGdyb3VwLCBzbyBzaG91bGQgYmUgZGlmZmVyZW50IGV2ZXJ5IHRpbWUgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQuXG4gICAqL1xuICByZWFkb25seSBzdHJlYW1JZDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQ29uZmlnV2l0aERlcGVuZGFibGVzIHtcbiAgLyoqXG4gICAqIFJlc291cmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBieSB0aGUgc3ViLWNvbmZpZyBjcmVhdG9yIHRoYXQgbXVzdCBiZSBkZXBsb3llZCBiZWZvcmUgdGhlIGRlbGl2ZXJ5IHN0cmVhbSBpcyBkZXBsb3llZC5cbiAgICovXG4gIHJlYWRvbmx5IGRlcGVuZGFibGVzOiBJRGVwZW5kYWJsZVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlc3RpbmF0aW9uTG9nZ2luZ0NvbmZpZyBleHRlbmRzIENvbmZpZ1dpdGhEZXBlbmRhYmxlcyB7XG4gIC8qKlxuICAgKiBMb2dnaW5nIG9wdGlvbnMgdGhhdCB3aWxsIGJlIGluamVjdGVkIGludG8gdGhlIGRlc3RpbmF0aW9uIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICByZWFkb25seSBsb2dnaW5nT3B0aW9uczogQ2ZuRGVsaXZlcnlTdHJlYW0uQ2xvdWRXYXRjaExvZ2dpbmdPcHRpb25zUHJvcGVydHk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVzdGluYXRpb25CYWNrdXBDb25maWcgZXh0ZW5kcyBDb25maWdXaXRoRGVwZW5kYWJsZXMge1xuICAvKipcbiAgICogUzMgYmFja3VwIGNvbmZpZ3VyYXRpb24gdGhhdCB3aWxsIGJlIGluamVjdGVkIGludG8gdGhlIGRlc3RpbmF0aW9uIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICByZWFkb25seSBiYWNrdXBDb25maWc6IENmbkRlbGl2ZXJ5U3RyZWFtLlMzRGVzdGluYXRpb25Db25maWd1cmF0aW9uUHJvcGVydHk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2dnaW5nT3B0aW9ucyhzY29wZTogQ29uc3RydWN0LCBwcm9wczogRGVzdGluYXRpb25Mb2dnaW5nUHJvcHMpOiBEZXN0aW5hdGlvbkxvZ2dpbmdDb25maWcgfCB1bmRlZmluZWQge1xuICBpZiAocHJvcHMubG9nZ2luZyA9PT0gZmFsc2UgJiYgcHJvcHMubG9nR3JvdXApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2xvZ2dpbmcgY2Fubm90IGJlIHNldCB0byBmYWxzZSB3aGVuIGxvZ0dyb3VwIGlzIHByb3ZpZGVkJyk7XG4gIH1cbiAgaWYgKHByb3BzLmxvZ2dpbmcgIT09IGZhbHNlIHx8IHByb3BzLmxvZ0dyb3VwKSB7XG4gICAgY29uc3QgbG9nR3JvdXAgPSBwcm9wcy5sb2dHcm91cCA/PyBOb2RlLm9mKHNjb3BlKS50cnlGaW5kQ2hpbGQoJ0xvZ0dyb3VwJykgYXMgbG9ncy5JTG9nR3JvdXAgPz8gbmV3IGxvZ3MuTG9nR3JvdXAoc2NvcGUsICdMb2dHcm91cCcpO1xuICAgIGNvbnN0IGxvZ0dyb3VwR3JhbnQgPSBsb2dHcm91cC5ncmFudFdyaXRlKHByb3BzLnJvbGUpO1xuICAgIHJldHVybiB7XG4gICAgICBsb2dnaW5nT3B0aW9uczoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBsb2dHcm91cE5hbWU6IGxvZ0dyb3VwLmxvZ0dyb3VwTmFtZSxcbiAgICAgICAgbG9nU3RyZWFtTmFtZTogbG9nR3JvdXAuYWRkU3RyZWFtKHByb3BzLnN0cmVhbUlkKS5sb2dTdHJlYW1OYW1lLFxuICAgICAgfSxcbiAgICAgIGRlcGVuZGFibGVzOiBbbG9nR3JvdXBHcmFudF0sXG4gICAgfTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQnVmZmVyaW5nSGludHMoXG4gIGludGVydmFsPzogY2RrLkR1cmF0aW9uLFxuICBzaXplPzogY2RrLlNpemUsXG4pOiBDZm5EZWxpdmVyeVN0cmVhbS5CdWZmZXJpbmdIaW50c1Byb3BlcnR5IHwgdW5kZWZpbmVkIHtcbiAgaWYgKCFpbnRlcnZhbCAmJiAhc2l6ZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBpbnRlcnZhbEluU2Vjb25kcyA9IGludGVydmFsPy50b1NlY29uZHMoKSA/PyAzMDA7XG4gIGlmIChpbnRlcnZhbEluU2Vjb25kcyA8IDYwIHx8IGludGVydmFsSW5TZWNvbmRzID4gOTAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBCdWZmZXJpbmcgaW50ZXJ2YWwgbXVzdCBiZSBiZXR3ZWVuIDYwIGFuZCA5MDAgc2Vjb25kcy4gQnVmZmVyaW5nIGludGVydmFsIHByb3ZpZGVkIHdhcyAke2ludGVydmFsSW5TZWNvbmRzfSBzZWNvbmRzLmApO1xuICB9XG4gIGNvbnN0IHNpemVJbk1CcyA9IHNpemU/LnRvTWViaWJ5dGVzKCkgPz8gNTtcbiAgaWYgKHNpemVJbk1CcyA8IDEgfHwgc2l6ZUluTUJzID4gMTI4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBCdWZmZXJpbmcgc2l6ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgMTI4IE1pQnMuIEJ1ZmZlcmluZyBzaXplIHByb3ZpZGVkIHdhcyAke3NpemVJbk1Cc30gTWlCcy5gKTtcbiAgfVxuICByZXR1cm4geyBpbnRlcnZhbEluU2Vjb25kcywgc2l6ZUluTUJzIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbmNyeXB0aW9uQ29uZmlnKFxuICByb2xlOiBpYW0uSVJvbGUsXG4gIGVuY3J5cHRpb25LZXk/OiBrbXMuSUtleSxcbik6IENmbkRlbGl2ZXJ5U3RyZWFtLkVuY3J5cHRpb25Db25maWd1cmF0aW9uUHJvcGVydHkgfCB1bmRlZmluZWQge1xuICBlbmNyeXB0aW9uS2V5Py5ncmFudEVuY3J5cHREZWNyeXB0KHJvbGUpO1xuICByZXR1cm4gZW5jcnlwdGlvbktleVxuICAgID8geyBrbXNFbmNyeXB0aW9uQ29uZmlnOiB7IGF3c2ttc0tleUFybjogZW5jcnlwdGlvbktleS5rZXlBcm4gfSB9XG4gICAgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9jZXNzaW5nQ29uZmlnKFxuICBzY29wZTogQ29uc3RydWN0LFxuICByb2xlOiBpYW0uSVJvbGUsXG4gIGRhdGFQcm9jZXNzb3I/OiBmaXJlaG9zZS5JRGF0YVByb2Nlc3Nvcixcbik6IENmbkRlbGl2ZXJ5U3RyZWFtLlByb2Nlc3NpbmdDb25maWd1cmF0aW9uUHJvcGVydHkgfCB1bmRlZmluZWQge1xuICByZXR1cm4gZGF0YVByb2Nlc3NvclxuICAgID8ge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHByb2Nlc3NvcnM6IFtyZW5kZXJEYXRhUHJvY2Vzc29yKGRhdGFQcm9jZXNzb3IsIHNjb3BlLCByb2xlKV0sXG4gICAgfVxuICAgIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZW5kZXJEYXRhUHJvY2Vzc29yKFxuICBwcm9jZXNzb3I6IGZpcmVob3NlLklEYXRhUHJvY2Vzc29yLFxuICBzY29wZTogQ29uc3RydWN0LFxuICByb2xlOiBpYW0uSVJvbGUsXG4pOiBDZm5EZWxpdmVyeVN0cmVhbS5Qcm9jZXNzb3JQcm9wZXJ0eSB7XG4gIGNvbnN0IHByb2Nlc3NvckNvbmZpZyA9IHByb2Nlc3Nvci5iaW5kKHNjb3BlLCB7IHJvbGUgfSk7XG4gIGNvbnN0IHBhcmFtZXRlcnMgPSBbeyBwYXJhbWV0ZXJOYW1lOiAnUm9sZUFybicsIHBhcmFtZXRlclZhbHVlOiByb2xlLnJvbGVBcm4gfV07XG4gIHBhcmFtZXRlcnMucHVzaChwcm9jZXNzb3JDb25maWcucHJvY2Vzc29ySWRlbnRpZmllcik7XG4gIGlmIChwcm9jZXNzb3IucHJvcHMuYnVmZmVySW50ZXJ2YWwpIHtcbiAgICBwYXJhbWV0ZXJzLnB1c2goeyBwYXJhbWV0ZXJOYW1lOiAnQnVmZmVySW50ZXJ2YWxJblNlY29uZHMnLCBwYXJhbWV0ZXJWYWx1ZTogcHJvY2Vzc29yLnByb3BzLmJ1ZmZlckludGVydmFsLnRvU2Vjb25kcygpLnRvU3RyaW5nKCkgfSk7XG4gIH1cbiAgaWYgKHByb2Nlc3Nvci5wcm9wcy5idWZmZXJTaXplKSB7XG4gICAgcGFyYW1ldGVycy5wdXNoKHsgcGFyYW1ldGVyTmFtZTogJ0J1ZmZlclNpemVJbk1CcycsIHBhcmFtZXRlclZhbHVlOiBwcm9jZXNzb3IucHJvcHMuYnVmZmVyU2l6ZS50b01lYmlieXRlcygpLnRvU3RyaW5nKCkgfSk7XG4gIH1cbiAgaWYgKHByb2Nlc3Nvci5wcm9wcy5yZXRyaWVzKSB7XG4gICAgcGFyYW1ldGVycy5wdXNoKHsgcGFyYW1ldGVyTmFtZTogJ051bWJlck9mUmV0cmllcycsIHBhcmFtZXRlclZhbHVlOiBwcm9jZXNzb3IucHJvcHMucmV0cmllcy50b1N0cmluZygpIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogcHJvY2Vzc29yQ29uZmlnLnByb2Nlc3NvclR5cGUsXG4gICAgcGFyYW1ldGVycyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJhY2t1cENvbmZpZyhzY29wZTogQ29uc3RydWN0LCByb2xlOiBpYW0uSVJvbGUsIHByb3BzPzogRGVzdGluYXRpb25TM0JhY2t1cFByb3BzKTogRGVzdGluYXRpb25CYWNrdXBDb25maWcgfCB1bmRlZmluZWQge1xuICBpZiAoIXByb3BzIHx8IChwcm9wcy5tb2RlID09PSB1bmRlZmluZWQgJiYgIXByb3BzLmJ1Y2tldCkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgYnVja2V0ID0gcHJvcHMuYnVja2V0ID8/IG5ldyBzMy5CdWNrZXQoc2NvcGUsICdCYWNrdXBCdWNrZXQnKTtcbiAgY29uc3QgYnVja2V0R3JhbnQgPSBidWNrZXQuZ3JhbnRSZWFkV3JpdGUocm9sZSk7XG5cbiAgY29uc3QgeyBsb2dnaW5nT3B0aW9ucywgZGVwZW5kYWJsZXM6IGxvZ2dpbmdEZXBlbmRhYmxlcyB9ID0gY3JlYXRlTG9nZ2luZ09wdGlvbnMoc2NvcGUsIHtcbiAgICBsb2dnaW5nOiBwcm9wcy5sb2dnaW5nLFxuICAgIGxvZ0dyb3VwOiBwcm9wcy5sb2dHcm91cCxcbiAgICByb2xlLFxuICAgIHN0cmVhbUlkOiAnUzNCYWNrdXAnLFxuICB9KSA/PyB7fTtcblxuICByZXR1cm4ge1xuICAgIGJhY2t1cENvbmZpZzoge1xuICAgICAgYnVja2V0QXJuOiBidWNrZXQuYnVja2V0QXJuLFxuICAgICAgcm9sZUFybjogcm9sZS5yb2xlQXJuLFxuICAgICAgcHJlZml4OiBwcm9wcy5kYXRhT3V0cHV0UHJlZml4LFxuICAgICAgZXJyb3JPdXRwdXRQcmVmaXg6IHByb3BzLmVycm9yT3V0cHV0UHJlZml4LFxuICAgICAgYnVmZmVyaW5nSGludHM6IGNyZWF0ZUJ1ZmZlcmluZ0hpbnRzKHByb3BzLmJ1ZmZlcmluZ0ludGVydmFsLCBwcm9wcy5idWZmZXJpbmdTaXplKSxcbiAgICAgIGNvbXByZXNzaW9uRm9ybWF0OiBwcm9wcy5jb21wcmVzc2lvbj8udmFsdWUsXG4gICAgICBlbmNyeXB0aW9uQ29uZmlndXJhdGlvbjogY3JlYXRlRW5jcnlwdGlvbkNvbmZpZyhyb2xlLCBwcm9wcy5lbmNyeXB0aW9uS2V5KSxcbiAgICAgIGNsb3VkV2F0Y2hMb2dnaW5nT3B0aW9uczogbG9nZ2luZ09wdGlvbnMsXG4gICAgfSxcbiAgICBkZXBlbmRhYmxlczogW2J1Y2tldEdyYW50LCAuLi4obG9nZ2luZ0RlcGVuZGFibGVzID8/IFtdKV0sXG4gIH07XG59XG4iXX0=